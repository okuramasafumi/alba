module Alba
  # Representing association
  class Association
    # Class methods
    @const_cache: Hash[untyped, untyped]
    
    def self.const_cache: () -> Hash[untyped, untyped]
    
    # Instance variables and methods
    attr_reader name: Symbol | String
    
    def initialize: (
      name: Symbol | String,
      ?condition: Proc?,
      ?resource: (Class | Proc | String | Symbol)?,
      ?source: Proc?,
      ?with_traits: (Symbol | Array[Symbol])?,
      ?params: Hash[untyped, untyped],
      ?nesting: String?,
      ?key_transformation: Alba::transform_type,
      ?helper: Module?
    ) ?{ () -> void } -> void
    
    def key_transformation=: (Alba::transform_type type) -> void
    
    def to_h: (
      untyped target,
      ?within: untyped,
      ?params: Hash[untyped, untyped]
    ) -> (Hash[untyped, untyped] | Array[Hash[untyped, untyped]] | nil)
    
    private
    
    def object_from: (untyped target, Hash[untyped, untyped] params) -> untyped
    def constantize: (Class | Symbol | String resource) -> Class
    def assign_resource: (String? nesting, Alba::transform_type key_transformation, Proc? block, Module? helper) -> void
    def charged_resource_class: (Module? helper, Alba::transform_type key_transformation, Proc block) -> Class
    def to_h_with_each_resource: (Enumerable[untyped] object, untyped within, Hash[untyped, untyped] params) -> Array[Hash[untyped, untyped]]
    def to_h_with_constantize_resource: (untyped object, untyped within, Hash[untyped, untyped] params) -> Hash[untyped, untyped]
  end
end